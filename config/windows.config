# This file contains the default configuration to compile for Windows
# platforms. It contains sensitive enviroment configuration that
# shouldn't be modified unless you now what you are doing.
# PLEASE, DO NOT EDIT THIS FILE

import os
from cerbero.config import Architecture, Platform

# We don't want anything from mingw or msys detected in configure and
# used later.
allow_system_libs=False

if platform == Platform.WINDOWS:
    separator = ';'
    if target_arch == Architecture.X86:
        build = 'i686-w64-mingw32'
    if target_arch == Architecture.X86_64:
        build = 'x86_64-w64-mingw32'
else:
    separator = ':'

if target_arch == Architecture.X86:
    buildname='windows_x86'
    host = 'i686-w64-mingw32'
    _path = 'w32'
else:
    buildname='windows_x86_64'
    host = 'x86_64-w64-mingw32'
    _path = 'w64'

target = host

if not toolchain_prefix:
    toolchain_prefix = os.path.join(home_dir, 'mingw', _path)
if not mingw_perl_prefix:
    mingw_perl_prefix = os.path.join(home_dir, 'mingw', 'perl')

def cmd(command):
    return '%s-%s' % (host, command)

export_msvc = ('CERBERO_MSVC_SHELL' in os.environ) and (platform == Platform.WINDOWS)

# Default GCC compiler flags
if not export_msvc:
    os.environ['CFLAGS'] = '-Wall -g -O2 '
    os.environ['CXXFLAGS'] = '-Wall -g -O2 '
    os.environ['OBJCFLAGS'] = '-Wall -g -O2 '

ccache = use_ccache and 'ccache ' or ''

# Toolchain environment
os.environ['CFLAGS'] += "-DWINVER=0x0600 -D_WIN32_WINNT=0x0600"
os.environ['CXXFLAGS']=os.environ['CFLAGS']
os.environ['PERL'] = 'perl'
os.environ['NM']= cmd('nm')
os.environ['DLLTOOL']= cmd('dlltool')
if not export_msvc:
    os.environ['LIBRARY_PATH'] = "{0}/lib{1}".format(prefix, lib_suffix)
    os.environ['CC']= '%s%s' % (ccache, cmd('gcc'))
    os.environ['CXX']= '%s%s' % (ccache, cmd('g++'))
    os.environ['LD']= cmd('ld')
    os.environ['CPP']= cmd('cpp')
    os.environ['RANLIB']= cmd('ranlib')
    os.environ['AR']= cmd('ar')
    os.environ['AS']= cmd('as')
    os.environ['STRIP']= cmd('strip')
    os.environ['WINDRES']= cmd('windres')
    os.environ['RC']= cmd('windres')
    # PATH
    toolchainbin = os.path.join(toolchain_prefix, 'bin')
    if os.path.isdir(toolchainbin) and not toolchainbin in os.environ['PATH']:
        os.environ['PATH'] = '%s%s%s' % (toolchainbin, separator, os.environ['PATH'])

os.environ['ne_cv_libsfor_socket'] = '-lws2_32'
os.environ['ne_cv_libsfor_gethostbyname'] = '-lws2_32'
os.environ['ac_cv_func_malloc_0_nonnull'] ='yes'
os.environ['ac_cv_func_realloc_0_nonnull'] ='yes'
os.environ['lt_cv_deplibs_check_method'] = 'pass_all'
os.environ['ac_cv_lib_bz2_BZ2_bzlibVersion'] = 'yes'
os.environ['ac_cv_c_attribute_aligned'] = '64'

# DirectX and DirectSound
os.environ['DIRECTSOUND_CFLAGS'] = '-I%s/%s/include/directx' % (toolchain_prefix, host)
os.environ['DIRECSOUND_LDFLAGS'] = '-L%s/lib' % toolchain_prefix
os.environ['DIRECTX_CFLAGS']= '-I%s/include/DirectX' % toolchain_prefix
os.environ['DIRECTX_CFLAGS'] = '-I%s/%s/include/directx' % (toolchain_prefix, host)
os.environ['DIRECTX_LDFLAGS'] = '-L%s/lib' % toolchain_prefix

if platform == Platform.WINDOWS:
    os.environ['ACLOCAL'] = 'aclocal-1.11'
    # We use Visual Studio by default on Windows
    if 'novisualstudio' not in variants:
        variants.append('visualstudio')
    from cerbero.ide.vs.env import vcvarsall, get_msvc_env, append_path
    # Contains only the env vars that MSVC needs, including any existing vars
    # that were appended/prepended and have new values
    msvc_toolchain_env = get_msvc_env(vcvarsall, arch, target_arch)
    # We want the MSVC compiler and linker to find the headers and libraries
    # provided by recipes built by us, so append to INCLUDE and LIB.
    # NOTE: We do not want to add the MinGW toolchain paths here
    msvc_toolchain_env['INCLUDE'] = append_path(msvc_toolchain_env['INCLUDE'],
                                                os.path.join(prefix, 'include'))
    msvc_toolchain_env['LIB'] = append_path(msvc_toolchain_env['LIB'],
                                            os.path.join(prefix, 'lib' + lib_suffix))
    if export_msvc:
        for var, val in msvc_toolchain_env.items():
            os.environ[var] = val
